/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.custos.resource.secret.service;

option go_package = "./pb";

enum ResourceOwnerType {
    TENANT_USER = 0;
    CUSTOS = 1;
    TENANT = 2;
}

enum ResourceType {
    SERVER_CERTIFICATE = 0;
    JWT_SIGNING_CERTIFICATE = 1;
    VAULT_CREDENTIAL = 2;
    VM = 3;
    ACCOUNT = 4;
    OTHER = 5;
    SCP =6;
    S3 =7;
    BOX =8;
    AZURE =9;
    GCS = 10;
    DROPBOX=11;
    FTP=12;
}

enum ResourceSource {
    KUBE = 0;
    LOCAL = 1;
    EXTERNAL = 2;
    LETSENCRYPT = 3;
}

enum ResourceSecretType {
    SSH = 0;
    PASSWORD = 1;
    X509_CERTIFICATE = 2;
    RAW_DATA= 3;
    KV=4;
    CREDENTIAL_MAP=5;
}

message SecretMetadata {
    ResourceOwnerType owner_type = 1;
    ResourceType resource_type = 2;
    ResourceSource source = 3;
    string name = 4;
    string value = 5;
    ResourceSecretType type = 6;
    int64 tenantId = 7;
    string owner_id = 8;
    int64 persisted_time = 9;
    string token = 10;
    string description = 11;
    string client_id = 12;

}





message CertificateCredential {
    SecretMetadata metadata = 1;
    string x509_cert = 3;
    string not_after = 4;
    string private_key = 5;
    int64 life_time = 6;
    string not_before = 7;
    bool use_shamirs_secret_sharing_with_encryption = 8;
    int32 num_of_shares = 9;
    int32 threshold = 10;
    repeated bytes  private_key_shares = 11;
}

message PasswordCredential {
    SecretMetadata metadata = 1;
    string password = 3;
    bool use_shamirs_secret_sharing_with_encryption = 4;
    int32 num_of_shares = 5;
    int32 threshold = 6;
    repeated bytes  secret_shares = 7;
    string userId = 8;
}

message SSHCredential {
    SecretMetadata metadata = 1;
    string passphrase = 3;
    string public_key = 4;
    string private_key = 5;
    bool use_shamirs_secret_sharing_with_encryption = 6;
    int32 num_of_shares = 7;
    int32 threshold = 8;
    repeated bytes  private_key_shares = 9;
}


message GetResourceCredentialByTokenRequest {
    int64 tenantId = 1;
    string token = 2;
    string performed_by = 3;
    string client_id = 4;
    bool use_shamirs_secret_sharing_with_encryption = 5;
    int32 num_of_shares = 6;
    int32 threshold = 7;

}

message GetResourceCredentialSummariesRequest {
    ResourceType type = 1;
    repeated string accessible_tokens = 2;
    int64 tenantId = 3;
    string owner_id = 4;
    bool all_types = 5;
    string client_id =6;
}

message ResourceCredentialSummaries {
    repeated SecretMetadata metadata = 1;
}

message AddResourceCredentialResponse {
    string token = 1;
}

message ResourceCredentialOperationStatus {
    bool status = 1;
}


message KVCredential {
    string key = 1;
    string value = 2;
    SecretMetadata metadata = 3;
    string token = 4;
}




message GetSecretRequest {
    SecretMetadata metadata = 1;
    string client_id =2;
    int64 tenant_id = 3;
    string client_sec = 4;
}

message CredentialMap {
    map<string,string> credential_map = 1;
    SecretMetadata metadata = 2;
}



service ResourceSecretService {
    rpc getKVCredential (KVCredential) returns (KVCredential);
    rpc setKVCredential(KVCredential)  returns (ResourceCredentialOperationStatus);
    rpc updateKVCredential (KVCredential) returns (ResourceCredentialOperationStatus);
    rpc deleteKVCredential (KVCredential) returns (ResourceCredentialOperationStatus);

    rpc getCredentialMap (CredentialMap) returns (CredentialMap);
    rpc setCredentialMap (CredentialMap) returns (AddResourceCredentialResponse);
    rpc updateCredentialMap (CredentialMap) returns (ResourceCredentialOperationStatus);
    rpc deleteCredentialMap (CredentialMap) returns (ResourceCredentialOperationStatus);

    rpc getResourceCredentialSummary (GetResourceCredentialByTokenRequest) returns (SecretMetadata);
    rpc getAllResourceCredentialSummaries (GetResourceCredentialSummariesRequest) returns (ResourceCredentialSummaries);
    rpc addSSHCredential (SSHCredential) returns (AddResourceCredentialResponse);
    rpc addPasswordCredential (PasswordCredential) returns (AddResourceCredentialResponse);
    rpc addCertificateCredential (CertificateCredential) returns (AddResourceCredentialResponse);
    rpc updateCertificateCredential (CertificateCredential) returns (ResourceCredentialOperationStatus);

    rpc getSSHCredential (GetResourceCredentialByTokenRequest) returns (SSHCredential);
    rpc getPasswordCredential (GetResourceCredentialByTokenRequest) returns (PasswordCredential);
    rpc getCertificateCredential (GetResourceCredentialByTokenRequest) returns (CertificateCredential);

    rpc deleteSSHCredential (GetResourceCredentialByTokenRequest) returns (ResourceCredentialOperationStatus);
    rpc deletePWDCredential (GetResourceCredentialByTokenRequest) returns (ResourceCredentialOperationStatus);
    rpc deleteCertificateCredential (GetResourceCredentialByTokenRequest) returns (ResourceCredentialOperationStatus);
}